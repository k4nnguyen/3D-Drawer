import os
import uvicorn
import numpy as np
import plotly.graph_objects as go
import google.generativeai as genai
import re
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from dotenv import load_dotenv

# --- C·∫•u h√¨nh ---
# Vui l√≤ng t·∫°o file .env trong th∆∞ m·ª•c backend v√† th√™m GOOGLE_API_KEY="KEY_CUA_BAN"
load_dotenv()
API_KEY = os.getenv("GOOGLE_API_KEY")

if API_KEY:
    genai.configure(api_key=API_KEY)
else:
    print("C·∫¢NH B√ÅO: Bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y.")

app = FastAPI()

# --- C·∫•u h√¨nh CORS ---
origins = [
    "http://localhost",
    "http://localhost:3000",
    "http://localhost:5173", # Port m·∫∑c ƒë·ªãnh c·ªßa Vite
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- Model ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu t·ª´ frontend ---
class PromptRequest(BaseModel):
    prompt: str

# --- C·∫•u h√¨nh m√¥ h√¨nh AI ---
# S·ª≠ d·ª•ng model gemini-2.5-flash theo y√™u c·∫ßu
gemini_model = genai.GenerativeModel('gemini-2.5-flash') if API_KEY else None

# H√†m ƒë·ªÉ tr√≠ch xu·∫•t code Python t·ª´ text c·ªßa AI
def extract_python_code(text):
    match = re.search(r"```python\n(.*?)\n```", text, re.DOTALL)
    if match:
        return match.group(1).strip()
    return None

# --- Trang tr√≠ Figure ƒë·ªÉ ƒë·∫πp v√† chi ti·∫øt h∆°n ---
def beautify_figure(fig: go.Figure) -> go.Figure:
    """√Åp d·ª•ng style t·ªëi nh·∫π, ch·ªØ r√µ, legend s√°ng v√† c√¢n b·∫±ng."""
    fig.update_layout(
        template="plotly_dark",
        autosize=True,
        margin=dict(l=10, r=10, b=10, t=40),
        showlegend=True,
        legend=dict(
            bgcolor="rgba(240,240,240,0.8)",  # n·ªÅn s√°ng nh·∫π, h∆°i m·ªù
            bordercolor="rgba(0,0,0,0.2)",
            borderwidth=1,
            x=0.02,
            y=0.98,
            font=dict(
                family="Segoe UI, Inter, Roboto, Arial, sans-serif",
                size=13,
                color="#111",  # ch·ªØ ƒëen
            ),
        ),
        font=dict(
            family="Segoe UI, Inter, Roboto, Arial, sans-serif",
            size=14,
            color="#000000",  # m√†u ch·ªØ chung (s√°ng)
        ),
        colorway=[
            "#4E79A7", "#F28E2B", "#E15759", "#76B7B2", "#59A14F",
            "#EDC948", "#B07AA1", "#FF9DA7", "#9C755F", "#BAB0AC",
        ],
        paper_bgcolor="#1E1E1E",  # n·ªÅn t·ªïng th·ªÉ t·ªëi nh·∫π
        plot_bgcolor="#262626",
        hovermode="closest",
    )

    return fig


def finalize_figure(fig: go.Figure) -> go.Figure:
    """Th√™m legend v√† √°p d·ª•ng style cho figure."""
    if fig and isinstance(fig, go.Figure):
        # üîπ B·ªï sung legend n·∫øu thi·∫øu
        for i, tr in enumerate(fig.data):
            if not getattr(tr, "name", None):
                tr.name = f"Trace {i+1}"
            tr.showlegend = True  # √©p hi·ªÉn th·ªã

        # üîπ √Åp d·ª•ng style t·ªëi nh·∫π, legend s√°ng ch·ªØ ƒëen
        fig = beautify_figure(fig)

        # üîπ ƒê·∫£m b·∫£o legend lu√¥n n·ªïi b·∫≠t tr√™n n·ªÅn t·ªëi
        fig.update_layout(
            legend=dict(
                bgcolor="rgba(240,240,240,0.85)",  # n·ªÅn s√°ng h∆°n ƒë·ªÉ ch·ªØ ƒëen r√µ
                bordercolor="rgba(0,0,0,0.2)",
                borderwidth=1,
                font=dict(color="#111", size=13, family="Inter, sans-serif"),
            ),
        )

        return fig
    else:
        return None

# --- Logic ch√≠nh c·ªßa API ---
@app.post("/generate-plot")
async def generate_plot(request: PromptRequest):
    if not gemini_model:
        raise HTTPException(status_code=500, detail="API Key c·ªßa Google ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh tr√™n server.")

    print(f"Nh·∫≠n ƒë∆∞·ª£c prompt: {request.prompt}")
    system_prompt = f"""
    B·∫°n l√† m·ªôt tr·ª£ l√Ω t·∫°o m√£ Python ƒë·ªÉ v·∫Ω h√¨nh kh·ªëi, v·∫≠t th·ªÉ 3D b·∫±ng Plotly.

    QUY T·∫ÆC:
    1. CH·ªà tr·∫£ v·ªÅ m√£ Python trong kh·ªëi ```python ... ```.
    2. KH√îNG gi·∫£i th√≠ch, ch·ªâ c·∫ßn code.
    3. Import c·∫ßn thi·∫øt: plotly.graph_objects as go, numpy as np.
    4. T·∫°o ƒë·ªëi t∆∞·ª£ng `fig = go.Figure(...)`.
    5. Kh√¥ng g·ªçi `fig.show()`.
    6. Y√™u c·∫ßu c·∫ßn ph·∫£i t·∫°o c·∫£ legend ƒë·∫ßy ƒë·ªß, ch·ªØ c·ªßa legend c·∫ßn l√† m√†u tr·∫Øng v√† in ƒë·∫≠m.
    7. Y√™u c·∫ßu v·ªõi c√°c kh·ªëi c·∫ßn ƒë·∫∑t tr√™n m·ªôt n·ªÅn ƒëen, ngo√†i ra c≈©ng c·∫ßn c√≥ c√°c l∆∞·ªõi m√†u tr·∫Øng theo tr·ª•c X v√† Y ƒë·ªÉ c√≥ th·ªÉ t∆∞∆°ng ph·∫£n.
    8. Y√™u c·∫ßu ph·∫ßn tr·ª•c n√™n c√≥ c√°c s·ªë l√† chi·ªÅu cao v√† d√†i ƒë·ªÉ gi·ªëng ƒë·ªì th·ªã.
    9. V·ªõi c√°c lo·∫°i h√¨nh h·ªçc: H√¨nh tr√≤n, h√¨nh tam gi√°c, h√¨nh h·ªôp, ... Th√¨ s·∫Ω ph·∫£i v·∫Ω ra kh·ªëi 3D c·ªßa n√≥.
    10. C√°c lo·∫°i h√¨nh kh·ªëi n√™n l√† kh·ªëi ƒë·∫∑c, l·ªõp ngo√†i kh√¥ng c√≥ trong su·ªët, v·∫Ω c√°c kh·ªëi n√™n ƒë·ªï b√≥ng ƒë·ªÉ nh√¨n cho d·ªÖ.
    Y√™u c·∫ßu: "{request.prompt}"
    """
    try:
        print("ƒêang g·ªçi Gemini API ƒë·ªÉ t·∫°o code...")
        response = gemini_model.generate_content(
            system_prompt,
            safety_settings={
                'HARM_CATEGORY_HARASSMENT': 'BLOCK_NONE',
                'HARM_CATEGORY_HATE_SPEECH': 'BLOCK_NONE',
                'HARM_CATEGORY_SEXUALLY_EXPLICIT': 'BLOCK_NONE',
                'HARM_CATEGORY_DANGEROUS_CONTENT': 'BLOCK_NONE',
            }
        )
        
        try:
            generated_code_raw = response.text
        except ValueError:
            finish_reason = "UNKNOWN"
            if response.candidates and response.candidates[0].finish_reason:
                finish_reason = response.candidates[0].finish_reason.name
            error_message = f"Ph·∫£n h·ªìi c·ªßa AI b·ªã ch·∫∑n. L√Ω do: {finish_reason}. Vui l√≤ng th·ª≠ m·ªôt prompt kh√°c."
            raise HTTPException(status_code=400, detail=error_message)

        generated_code = extract_python_code(generated_code_raw)
        
        if not generated_code:
             raise HTTPException(status_code=400, detail="AI kh√¥ng t·∫°o ra ƒë∆∞·ª£c m√£ Python h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ trong ph·∫£n h·ªìi.")

        print("--- M√£ ƒë∆∞·ª£c t·∫°o b·ªüi AI ---")
        print(generated_code)
        print("--------------------------")
        
        local_scope = {}
        exec(generated_code, {"go": go, "np": np}, local_scope)
        fig = local_scope.get("fig")

        if fig and isinstance(fig, go.Figure):
            # Trang tr√≠ l·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o nh·∫•t qu√°n v√† ƒë·∫πp
            fig = finalize_figure(fig)
            print("Th·ª±c thi m√£ th√†nh c√¥ng, ƒëang chuy·ªÉn ƒë·ªïi Figure sang HTML...")
            config = dict(
                responsive=True,
                displaylogo=False,
                scrollZoom=True,
                toImageButtonOptions=dict(scale=2, filename="3d-plot"),
                modeBarButtonsToRemove=["lasso2d", "select2d", "toggleSpikelines"],
            )
            plot_html = fig.to_html(full_html=False, include_plotlyjs='cdn', config=config)
            # Tr·∫£ v·ªÅ c·∫£ code Python cho frontend
            return {
                "html": plot_html,
                "code": generated_code,
                "code_type": "python"
            }
        else:
            raise HTTPException(status_code=400, detail="M√£ do AI t·∫°o ra kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·∫°o ra ƒë·ªëi t∆∞·ª£ng 'fig'.")

    except Exception as e:
        print(f"ƒê√£ x·∫£y ra l·ªói: {e}")
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(status_code=500, detail=f"L·ªói m√°y ch·ªß n·ªôi b·ªô: {str(e)}")

if __name__ == "__main__":
    print("Kh·ªüi ƒë·ªông server t·∫°i http://127.0.0.1:8000")
    uvicorn.run(app, host="127.0.0.1", port=8000)



